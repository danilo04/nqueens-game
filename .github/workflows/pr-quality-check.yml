name: Pull Request Quality Check

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make scripts executable
      run: |
        chmod +x gradlew
        chmod +x code-quality.sh

    - name: Run code quality checks
      id: quality-check
      continue-on-error: true
      run: |
        echo "Running comprehensive quality checks..."
        ./code-quality.sh check > quality_report.txt 2>&1
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: Run unit tests
      id: unit-tests
      continue-on-error: true
      run: |
        echo "Running unit tests..."
        ./gradlew test > test_report.txt 2>&1
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: Generate Detekt report
      if: always()
      run: |
        ./gradlew detekt --continue || true
        # Convert XML report to a summary
        if [ -f "app/build/reports/detekt/detekt.xml" ]; then
          echo "Detekt issues found:" > detekt_summary.txt
          grep -o '<error.*severity="[^"]*".*message="[^"]*"' app/build/reports/detekt/detekt.xml | head -20 >> detekt_summary.txt || echo "No major issues found" >> detekt_summary.txt
        fi

    - name: Create quality report comment
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîç Code Quality Report\n\n';
          
          // Quality check results
          const qualityExitCode = '${{ steps.quality-check.outputs.exit_code }}';
          if (qualityExitCode === '0') {
            comment += '‚úÖ **Code Quality**: All checks passed!\n\n';
          } else {
            comment += '‚ùå **Code Quality**: Some issues found\n\n';
            try {
              const qualityReport = fs.readFileSync('quality_report.txt', 'utf8');
              comment += '<details><summary>View Quality Issues</summary>\n\n```\n' + qualityReport.slice(-2000) + '\n```\n</details>\n\n';
            } catch (e) {
              comment += 'Quality report not available\n\n';
            }
          }
          
          // Unit test results
          const testExitCode = '${{ steps.unit-tests.outputs.exit_code }}';
          if (testExitCode === '0') {
            comment += '‚úÖ **Unit Tests**: All tests passed!\n\n';
          } else {
            comment += '‚ùå **Unit Tests**: Some tests failed\n\n';
            try {
              const testReport = fs.readFileSync('test_report.txt', 'utf8');
              comment += '<details><summary>View Test Issues</summary>\n\n```\n' + testReport.slice(-2000) + '\n```\n</details>\n\n';
            } catch (e) {
              comment += 'Test report not available\n\n';
            }
          }
          
          // Detekt summary
          try {
            const detektSummary = fs.readFileSync('detekt_summary.txt', 'utf8');
            comment += '<details><summary>üìä Detekt Analysis Summary</summary>\n\n```\n' + detektSummary + '\n```\n</details>\n\n';
          } catch (e) {
            comment += 'üìä **Detekt Analysis**: Report not available\n\n';
          }
          
          comment += '---\n*This comment was automatically generated by the CI pipeline*';
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('üîç Code Quality Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Upload detailed reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-quality-reports
        path: |
          quality_report.txt
          test_report.txt
          detekt_summary.txt
          app/build/reports/
        retention-days: 14

    - name: Set PR status
      if: always()
      run: |
        QUALITY_EXIT=${{ steps.quality-check.outputs.exit_code }}
        TEST_EXIT=${{ steps.unit-tests.outputs.exit_code }}
        
        if [ "$QUALITY_EXIT" = "0" ] && [ "$TEST_EXIT" = "0" ]; then
          echo "‚úÖ All quality checks passed!"
          exit 0
        else
          echo "‚ùå Quality gate failed!"
          exit 1
        fi
